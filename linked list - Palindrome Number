/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        
        if(head==NULL){
            return false;
        }
        
        if(head->next==NULL){
            return true;
        }
        
        vector<int> num;
        ListNode* p = head ;
         ListNode * q =NULL;
        ListNode * r =NULL;
        while(p!=NULL){
            num.push_back(p->val);
            p=p->next;  
        }
        
        
        p = head;
        
        // p q r to reverse linkd list (reverse links)
        while(p!=NULL){
            r = q;
            q = p;
            
            p = p->next;
            
            q->next = r;
        }
        head = q ;
       
        // reverse linked list is done 
        
        
        p = head;  // reset p to beginning state
        
        int c=0;  // counter for vector
        
        while(p!=NULL){
            if(p->val != num[c]){
                return false;   // not palindrome
            }
            
            p = p->next;
            
            c++;
        }
        
        return true;

    }
};
