// note:  this code apply binary search algorithm with O(logn) instead of linear search O(n)

class Solution {
public:
    int maximumCount(vector<int>& nums) {
        if(nums.size()==1){
            return 1;
        }

        if(nums[0] > 0 || nums[nums.size()-1] < 0){  // all numbers are positive or negatives
            return nums.size();
        }

        if(nums[0]==0 && nums[nums.size()-1] ==0){  // all = 0
            return 0;
        }

        int low=0,high=nums.size()-1,mid=0,postiveNumbers=0,negativeNumbers=0;

        while(low<=high){
            mid=(low+high)/2;

            if(nums[mid]<0){
                negativeNumbers+=(mid-low+1);
                low = mid+1;
            }
            
            else if(nums[mid]>0){
                postiveNumbers+=(high-mid+1);
                high=mid-1;
            }
            else{
                negativeNumbers+=mid-low;
                low = mid+1;
            }
           
        }

        if(postiveNumbers>=negativeNumbers){
                return postiveNumbers;
        }
        else{
            return negativeNumbers;
        }
        
    }
};
